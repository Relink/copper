'use strict';

var chai = require('chai');
chai.use(require('sinon-chai'));
var expect = chai.expect;
var sinon = require('sinon');
var _ = require('lodash');
var stream = require('stream');
var EventEmitter = require('events').EventEmitter;
var utils = require('./utils');

describe('sequence', function () {
  describe('create', function () {
    it('applies backpressure and remembers everything', function () {
      var s = utils.sequence({ highWaterMark: 2 });
      expect(s.write([1, 2, undefined, 4])).to.be.true;
      expect(s.read()).to.equal(1);
      expect(s.write([5])).to.be.false;
      expect(s.read()).to.equal(2);
      expect(s.read()).to.equal(undefined);
      expect(s.read()).to.equal(4);
      expect(s.read()).to.equal(5);
      expect(s.write([6, 7])).to.be.true;
      expect(s.read()).to.equal(6);
      expect(s.read()).to.equal(7);
      expect(s.read()).to.equal(null);
    });
  });

  describe('filter', function () {
    it('filters by predicate', function (done) {
      var s1 = new stream.Readable({ objectMode: true });
      s1._read = function () {
        return null;
      };

      var filtered = s1.pipe(utils.filter(_.isNumber));
      s1.push('foo');
      s1.push('bar');
      s1.push(1);
      filtered.on('readable', function () {
        expect(filtered.read()).to.equal(1);
        done();
      });
    });
  });

  describe('write', function () {
    var s2;

    beforeEach(function () {
      s2 = new stream.Transform({
        objectMode: true,
        highWaterMark: 2,
        transform: function transform(d, e, cb) {
          return cb(null, d);
        }
      });
    });

    it('calls the callback immediately if the write queue is open', function (done) {
      utils.write(s2, 'foo').then(function () {
        return done();
      });
    });

    it('calls the callback after drain, if the write queue is full', function (done) {
      s2.write = sinon.stub();
      s2.write.returns(false);
      var resolved = false;

      utils.write(s2, 'foo').then(function () {
        resolved = true;
        done();
      });

      setTimeout(function () {
        expect(resolved).to.be.false;
        s2.write.returns(true);
        s2.emit('drain');
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,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b250ZW50IjpbInZhciBjaGFpID0gcmVxdWlyZSgnY2hhaScpO1xuY2hhaS51c2UocmVxdWlyZSgnc2lub24tY2hhaScpKTtcbnZhciBleHBlY3QgPSBjaGFpLmV4cGVjdDtcbnZhciBzaW5vbiA9IHJlcXVpcmUoJ3Npbm9uJyk7XG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xudmFyIHN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuXG5kZXNjcmliZSgnc2VxdWVuY2UnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdjcmVhdGUnLCAoKSA9PiB7XG4gICAgaXQoJ2FwcGxpZXMgYmFja3ByZXNzdXJlIGFuZCByZW1lbWJlcnMgZXZlcnl0aGluZycsICgpID0+IHtcbiAgICAgIHZhciBzID0gdXRpbHMuc2VxdWVuY2UoeyBoaWdoV2F0ZXJNYXJrOiAyfSk7XG4gICAgICBleHBlY3Qocy53cml0ZShbMSwyLHVuZGVmaW5lZCw0XSkpLnRvLmJlLnRydWVcbiAgICAgIGV4cGVjdChzLnJlYWQoKSkudG8uZXF1YWwoMSk7XG4gICAgICBleHBlY3Qocy53cml0ZShbNV0pKS50by5iZS5mYWxzZVxuICAgICAgZXhwZWN0KHMucmVhZCgpKS50by5lcXVhbCgyKTtcbiAgICAgIGV4cGVjdChzLnJlYWQoKSkudG8uZXF1YWwodW5kZWZpbmVkKTtcbiAgICAgIGV4cGVjdChzLnJlYWQoKSkudG8uZXF1YWwoNCk7XG4gICAgICBleHBlY3Qocy5yZWFkKCkpLnRvLmVxdWFsKDUpO1xuICAgICAgZXhwZWN0KHMud3JpdGUoWzYsIDddKSkudG8uYmUudHJ1ZVxuICAgICAgZXhwZWN0KHMucmVhZCgpKS50by5lcXVhbCg2KTtcbiAgICAgIGV4cGVjdChzLnJlYWQoKSkudG8uZXF1YWwoNyk7XG4gICAgICBleHBlY3Qocy5yZWFkKCkpLnRvLmVxdWFsKG51bGwpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZmlsdGVyJywgKCkgPT4ge1xuICAgIGl0KCdmaWx0ZXJzIGJ5IHByZWRpY2F0ZScsIGRvbmUgPT4ge1xuICAgICAgdmFyIHMxID0gbmV3IHN0cmVhbS5SZWFkYWJsZSh7b2JqZWN0TW9kZTogdHJ1ZX0pO1xuICAgICAgczEuX3JlYWQgPSAoKSA9PiBudWxsO1xuXG4gICAgICB2YXIgZmlsdGVyZWQgPSBzMS5waXBlKHV0aWxzLmZpbHRlcihfLmlzTnVtYmVyKSk7XG4gICAgICBzMS5wdXNoKCdmb28nKTtcbiAgICAgIHMxLnB1c2goJ2JhcicpO1xuICAgICAgczEucHVzaCgxKTtcbiAgICAgIGZpbHRlcmVkLm9uKCdyZWFkYWJsZScsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KGZpbHRlcmVkLnJlYWQoKSkudG8uZXF1YWwoMSlcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCd3cml0ZScsICgpID0+IHtcbiAgICB2YXIgczI7XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIHMyID0gbmV3IHN0cmVhbS5UcmFuc2Zvcm0oe1xuICAgICAgICBvYmplY3RNb2RlOiB0cnVlLFxuICAgICAgICBoaWdoV2F0ZXJNYXJrOiAyLFxuICAgICAgICB0cmFuc2Zvcm06IChkLCBlLCBjYikgPT4gY2IobnVsbCwgZClcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ2NhbGxzIHRoZSBjYWxsYmFjayBpbW1lZGlhdGVseSBpZiB0aGUgd3JpdGUgcXVldWUgaXMgb3BlbicsIGRvbmUgPT4ge1xuICAgICAgdXRpbHMud3JpdGUoczIsICdmb28nKS50aGVuKCgpID0+IGRvbmUoKSlcbiAgICB9KTtcblxuICAgIGl0KCdjYWxscyB0aGUgY2FsbGJhY2sgYWZ0ZXIgZHJhaW4sIGlmIHRoZSB3cml0ZSBxdWV1ZSBpcyBmdWxsJywgZG9uZSA9PiB7XG4gICAgICBzMi53cml0ZSA9IHNpbm9uLnN0dWIoKTtcbiAgICAgIHMyLndyaXRlLnJldHVybnMoZmFsc2UpO1xuICAgICAgdmFyIHJlc29sdmVkID0gZmFsc2U7XG5cbiAgICAgIHV0aWxzXG4gICAgICAgIC53cml0ZShzMiwgJ2ZvbycpXG4gICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICByZXNvbHZlZCA9IHRydWU7XG4gICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGV4cGVjdChyZXNvbHZlZCkudG8uYmUuZmFsc2U7XG4gICAgICAgIHMyLndyaXRlLnJldHVybnModHJ1ZSk7XG4gICAgICAgIHMyLmVtaXQoJ2RyYWluJyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==