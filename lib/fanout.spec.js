'use strict';

var chai = require('chai');
chai.use(require('sinon-chai'));
var expect = chai.expect;
var sinon = require('sinon');
var _ = require('lodash');
var stream = require('stream');
var EventEmitter = require('events').EventEmitter;
var fanout = require('./fanout');

describe('fanout', function () {

  describe('createStreams', function () {

    it('creates a direct connection between input stream and src ', function (done) {
      var input = stream.Readable({ objectMode: true, highWaterMark: 2, read: sinon.stub() });
      var created = fanout.createStreams();
      var ext = created.ext;
      var src = created.src;

      sinon.stub(src, 'push', src.push);
      sinon.stub(ext, 'write', ext.write);

      input.pipe(ext);

      var i = 0;
      var pushResults = [];
      while (++i <= 3) {
        pushResults.push(input.push(i));
      }expect(pushResults).to.deep.equal([true, false, false]);
      expect(src.push.callCount).to.equal(0);
      expect(ext.write.callCount).to.equal(0);
      expect(input._read.callCount).to.equal(0);

      setTimeout(function () {

        // Note: this shows that these are all asyncrhonous:
        expect(src.push.callCount).to.equal(3);
        expect(ext.write.callCount).to.equal(3);
        expect(input._read.callCount).to.equal(1);
        var j = 0;
        var readResults = [];
        while (++j <= 3) {
          readResults.push(src.read());
        }expect(readResults).to.deep.equal([1, 2, 3]);
        done();
      }, 30);
    });

    it('src will cause more read calls from the input', function (done) {

      // --------------------------------------------
      // this mess simulates our kafka consumer stream
      // ---------------------------------------------

      var consumer = new EventEmitter();
      var paused = true;
      var i = 0;

      function emit(consumer) {
        if (paused) return;
        consumer.emit('data', ++i);
        setTimeout(function () {
          emit(consumer);
        }, 100);
      }

      consumer.on('resume', function () {
        paused = false;
        emit(consumer);
      });

      consumer.on('pause', function () {
        paused = true;
      });

      function reader() {
        consumer.emit('resume');
      }

      var input = stream.Readable({ objectMode: true, highWaterMark: 2, read: reader });

      consumer.on('data', function (data) {
        if (!input.push(data)) {
          consumer.emit('pause');
        }
      });

      // ------------------------------------------------
      // end mess
      // ------------------------------------------------

      var created = fanout.createStreams();
      var ext = created.ext;
      var src = created.src;

      src._readableState.highWaterMark = 2;
      ext._writableState.highWaterMark = 2;

      sinon.stub(src, 'push', src.push);
      sinon.stub(ext, 'write', ext.write);
      sinon.stub(input, 'push', input.push);

      input.on('readable', _.noop); // kick off

      input.pipe(ext);

      // nothing should happen syncrhonously
      expect(src.push.callCount).to.equal(0);

      setTimeout(function () {

        // Here we see the effects of buffering that builds up
        // before the emitter is stopped.
        expect(input.push.callCount).to.equal(4);
        expect(ext.write.callCount).to.equal(2);
        expect(src.push.callCount).to.equal(2);

        // read 6 times
        var firstReads = [];
        var i = 0;
        while (++i <= 6) {
          firstReads.push(src.read());
        }expect(firstReads).to.deep.equal([1, 2, 3, 4, 5, 6]);

        // reading 6 times should have called the input.push
        // function 6 more times, and filled up all the other
        // buffers along the way.
        expect(input.push.callCount).to.equal(10);
        expect(ext.write.callCount).to.equal(8);
        expect(src.push.callCount).to.equal(8);

        done();
      }, 50);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,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QUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsQ0FBVCxFQUFXLENBQVgsQ0FBakM7Ozs7O0FBWmUsY0FpQmYsQ0FBTyxNQUFNLElBQU4sQ0FBVyxTQUFYLENBQVAsQ0FBNkIsRUFBN0IsQ0FBZ0MsS0FBaEMsQ0FBc0MsRUFBdEMsRUFqQmU7QUFrQmYsZUFBTyxJQUFJLEtBQUosQ0FBVSxTQUFWLENBQVAsQ0FBNEIsRUFBNUIsQ0FBK0IsS0FBL0IsQ0FBcUMsQ0FBckMsRUFsQmU7QUFtQmYsZUFBTyxJQUFJLElBQUosQ0FBUyxTQUFULENBQVAsQ0FBMkIsRUFBM0IsQ0FBOEIsS0FBOUIsQ0FBb0MsQ0FBcEMsRUFuQmU7O0FBcUJmLGVBckJlO09BQU4sRUFzQlIsRUF0QkgsRUE5RDBEO0tBQVIsQ0FBcEQsQ0FyQzhCO0dBQU4sQ0FBMUIsQ0FGdUI7Q0FBTixDQUFuQiIsImZpbGUiOiJmYW5vdXQuc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBjaGFpID0gcmVxdWlyZSgnY2hhaScpO1xuY2hhaS51c2UocmVxdWlyZSgnc2lub24tY2hhaScpKTtcbnZhciBleHBlY3QgPSBjaGFpLmV4cGVjdDtcbnZhciBzaW5vbiA9IHJlcXVpcmUoJ3Npbm9uJyk7XG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xudmFyIHN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbnZhciBmYW5vdXQgPSByZXF1aXJlKCcuL2Zhbm91dCcpXG5cblxuZGVzY3JpYmUoJ2Zhbm91dCcsICgpID0+IHtcblxuICBkZXNjcmliZSgnY3JlYXRlU3RyZWFtcycsICgpID0+IHtcblxuICAgIGl0KCdjcmVhdGVzIGEgZGlyZWN0IGNvbm5lY3Rpb24gYmV0d2VlbiBpbnB1dCBzdHJlYW0gYW5kIHNyYyAnLCBkb25lID0+IHtcbiAgICAgIHZhciBpbnB1dCA9IHN0cmVhbS5SZWFkYWJsZSh7IG9iamVjdE1vZGU6IHRydWUsIGhpZ2hXYXRlck1hcms6IDIsIHJlYWQ6IHNpbm9uLnN0dWIoKSB9KTtcbiAgICAgIHZhciBjcmVhdGVkID0gZmFub3V0LmNyZWF0ZVN0cmVhbXMoKTtcbiAgICAgIHZhciBleHQgPSBjcmVhdGVkLmV4dDtcbiAgICAgIHZhciBzcmMgPSBjcmVhdGVkLnNyYztcblxuICAgICAgc2lub24uc3R1YihzcmMsICdwdXNoJywgc3JjLnB1c2gpO1xuICAgICAgc2lub24uc3R1YihleHQsICd3cml0ZScsIGV4dC53cml0ZSk7XG5cbiAgICAgIGlucHV0LnBpcGUoZXh0KTtcblxuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIHB1c2hSZXN1bHRzID0gW11cbiAgICAgIHdoaWxlICgrK2kgPD0gMykgcHVzaFJlc3VsdHMucHVzaChpbnB1dC5wdXNoKGkpKTtcblxuICAgICAgZXhwZWN0KHB1c2hSZXN1bHRzKS50by5kZWVwLmVxdWFsKFt0cnVlLCBmYWxzZSwgZmFsc2VdKTtcbiAgICAgIGV4cGVjdChzcmMucHVzaC5jYWxsQ291bnQpLnRvLmVxdWFsKDApO1xuICAgICAgZXhwZWN0KGV4dC53cml0ZS5jYWxsQ291bnQpLnRvLmVxdWFsKDApO1xuICAgICAgZXhwZWN0KGlucHV0Ll9yZWFkLmNhbGxDb3VudCkudG8uZXF1YWwoMClcblxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG5cbiAgICAgICAgLy8gTm90ZTogdGhpcyBzaG93cyB0aGF0IHRoZXNlIGFyZSBhbGwgYXN5bmNyaG9ub3VzOlxuICAgICAgICBleHBlY3Qoc3JjLnB1c2guY2FsbENvdW50KS50by5lcXVhbCgzKTtcbiAgICAgICAgZXhwZWN0KGV4dC53cml0ZS5jYWxsQ291bnQpLnRvLmVxdWFsKDMpO1xuICAgICAgICBleHBlY3QoaW5wdXQuX3JlYWQuY2FsbENvdW50KS50by5lcXVhbCgxKVxuICAgICAgICB2YXIgaiA9IDA7XG4gICAgICAgIHZhciByZWFkUmVzdWx0cyA9IFtdO1xuICAgICAgICB3aGlsZSgrK2ogPD0gMykgcmVhZFJlc3VsdHMucHVzaChzcmMucmVhZCgpKTtcblxuICAgICAgICBleHBlY3QocmVhZFJlc3VsdHMpLnRvLmRlZXAuZXF1YWwoWzEsMiwzXSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIDMwKVxuICAgIH0pO1xuXG4gICAgaXQoJ3NyYyB3aWxsIGNhdXNlIG1vcmUgcmVhZCBjYWxscyBmcm9tIHRoZSBpbnB1dCcsIGRvbmUgPT4ge1xuXG4gICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgLy8gdGhpcyBtZXNzIHNpbXVsYXRlcyBvdXIga2Fma2EgY29uc3VtZXIgc3RyZWFtXG4gICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgICAgdmFyIGNvbnN1bWVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgdmFyIHBhdXNlZCA9IHRydWU7XG4gICAgICB2YXIgaSA9IDA7XG5cbiAgICAgIGZ1bmN0aW9uIGVtaXQgKGNvbnN1bWVyKSB7XG4gICAgICAgIGlmIChwYXVzZWQpIHJldHVybjtcbiAgICAgICAgY29uc3VtZXIuZW1pdCgnZGF0YScsICsraSk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGVtaXQoY29uc3VtZXIpXG4gICAgICAgIH0sIDEwMClcbiAgICAgIH1cblxuICAgICAgY29uc3VtZXIub24oJ3Jlc3VtZScsICgpID0+IHtcbiAgICAgICAgcGF1c2VkID0gZmFsc2U7XG4gICAgICAgIGVtaXQoY29uc3VtZXIpO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN1bWVyLm9uKCdwYXVzZScsICgpID0+IHtcbiAgICAgICAgcGF1c2VkID0gdHJ1ZTtcbiAgICAgIH0pO1xuXG4gICAgICBmdW5jdGlvbiByZWFkZXIgKCkge1xuICAgICAgICBjb25zdW1lci5lbWl0KCdyZXN1bWUnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGlucHV0ID0gc3RyZWFtLlJlYWRhYmxlKHsgb2JqZWN0TW9kZTogdHJ1ZSwgaGlnaFdhdGVyTWFyazogMiwgcmVhZDogcmVhZGVyIH0pO1xuXG4gICAgICBjb25zdW1lci5vbignZGF0YScsIGRhdGEgPT4ge1xuICAgICAgICBpZiAoIWlucHV0LnB1c2goZGF0YSkpIHtcbiAgICAgICAgICBjb25zdW1lci5lbWl0KCdwYXVzZScpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAvLyBlbmQgbWVzc1xuICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAgIHZhciBjcmVhdGVkID0gZmFub3V0LmNyZWF0ZVN0cmVhbXMoKTtcbiAgICAgIHZhciBleHQgPSBjcmVhdGVkLmV4dDtcbiAgICAgIHZhciBzcmMgPSBjcmVhdGVkLnNyYztcblxuICAgICAgc3JjLl9yZWFkYWJsZVN0YXRlLmhpZ2hXYXRlck1hcmsgPSAyO1xuICAgICAgZXh0Ll93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcmsgPSAyO1xuXG4gICAgICBzaW5vbi5zdHViKHNyYywgJ3B1c2gnLCBzcmMucHVzaCk7XG4gICAgICBzaW5vbi5zdHViKGV4dCwgJ3dyaXRlJywgZXh0LndyaXRlKTtcbiAgICAgIHNpbm9uLnN0dWIoaW5wdXQsICdwdXNoJywgaW5wdXQucHVzaCk7XG5cbiAgICAgIGlucHV0Lm9uKCdyZWFkYWJsZScsIF8ubm9vcCk7IC8vIGtpY2sgb2ZmXG5cbiAgICAgIGlucHV0XG4gICAgICAgIC5waXBlKGV4dCk7XG5cbiAgICAgIC8vIG5vdGhpbmcgc2hvdWxkIGhhcHBlbiBzeW5jcmhvbm91c2x5XG4gICAgICBleHBlY3Qoc3JjLnB1c2guY2FsbENvdW50KS50by5lcXVhbCgwKTtcblxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG5cbiAgICAgICAgLy8gSGVyZSB3ZSBzZWUgdGhlIGVmZmVjdHMgb2YgYnVmZmVyaW5nIHRoYXQgYnVpbGRzIHVwXG4gICAgICAgIC8vIGJlZm9yZSB0aGUgZW1pdHRlciBpcyBzdG9wcGVkLlxuICAgICAgICBleHBlY3QoaW5wdXQucHVzaC5jYWxsQ291bnQpLnRvLmVxdWFsKDQpO1xuICAgICAgICBleHBlY3QoZXh0LndyaXRlLmNhbGxDb3VudCkudG8uZXF1YWwoMik7XG4gICAgICAgIGV4cGVjdChzcmMucHVzaC5jYWxsQ291bnQpLnRvLmVxdWFsKDIpO1xuXG4gICAgICAgIC8vIHJlYWQgNiB0aW1lc1xuICAgICAgICB2YXIgZmlyc3RSZWFkcyA9IFtdO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlICgrK2kgPD0gNikgZmlyc3RSZWFkcy5wdXNoKHNyYy5yZWFkKCkpO1xuICAgICAgICBleHBlY3QoZmlyc3RSZWFkcykudG8uZGVlcC5lcXVhbChbMSwyLDMsNCw1LDZdKTtcblxuICAgICAgICAvLyByZWFkaW5nIDYgdGltZXMgc2hvdWxkIGhhdmUgY2FsbGVkIHRoZSBpbnB1dC5wdXNoXG4gICAgICAgIC8vIGZ1bmN0aW9uIDYgbW9yZSB0aW1lcywgYW5kIGZpbGxlZCB1cCBhbGwgdGhlIG90aGVyXG4gICAgICAgIC8vIGJ1ZmZlcnMgYWxvbmcgdGhlIHdheS5cbiAgICAgICAgZXhwZWN0KGlucHV0LnB1c2guY2FsbENvdW50KS50by5lcXVhbCgxMCk7XG4gICAgICAgIGV4cGVjdChleHQud3JpdGUuY2FsbENvdW50KS50by5lcXVhbCg4KTtcbiAgICAgICAgZXhwZWN0KHNyYy5wdXNoLmNhbGxDb3VudCkudG8uZXF1YWwoOCk7XG5cbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgNTApO1xuICAgIH0pXG4gIH0pXG59KTtcbiJdfQ==